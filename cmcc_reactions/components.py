
import ase
from rdkit import Chem
from rdkit.Chem import AllChem

class ReactionComponent:
    """
    A wrapper for handling reactants that uses `rdkit` and `ase`
    to implement chemical transformations
    """
    def __init__(self, ase_mol: ase.Atoms, charge):
        self.ase_mol = ase_mol
        self.total_charge = charge

    @classmethod
    def from_smiles(cls, smiles,
                    num_conformers=1,
                    energy_evaluator=None
                    ):
        ...

    @classmethod
    def from_rdkit(cls, rdkit_conformer):
        ...

    @classmethod
    def get_rdkit_positions(cls, mol):
        atom_positions = []
        for atom in mol.GetAtoms():
            atom_map_num = atom.GetAtomMapNum()
            symbol = atom.GetSymbol()
            pos = mol.GetAtomPosition(atom.GetIdx())
            atom_positions.append((atom_map_num, symbol, pos))

        # Sort by atom map number to ensure consistent atom order
        atom_positions.sort(key=lambda x: x[0])

        return [x[1:] for x in atom_positions]

    @property
    def atom_positions(self):
        return [
                [s, p]
                for s,p in zip(self.ase_mol.symbols, self.ase_mol.positions)
        ]

    default_note= "Generated by RDKit"
    def to_xyz(self, note=None):
        xyz = []
        atom_positions = self.atom_positions
        num_atoms = len(atom_positions)

        # Add the number of atoms and an optional comment line
        xyz.append(f"{num_atoms}")
        xyz.append(self.default_note if note is None else note)

        # Add atomic symbols and coordinates to the XYZ list
        for symbol, pos in atom_positions:
            xyz.append(f"{symbol}    {pos.x:.6f}    {pos.y:.6f}    {pos.z:.6f}")

        return "\n".join(xyz)


class ReactionComponentSet:
    ...