
import ase
from rdkit import Chem
from rdkit.Chem import AllChem

from .conversions import convert
from .energy_evaluators import AIMNetEnergyEvaluator, MMFFEnergyEvaluator
class ReactionComponent:
    """
    A wrapper for handling reactants that uses `rdkit` and `ase`
    to implement chemical transformations
    """
    def __init__(self, mol):
        self.mol = mol

    @classmethod
    def from_smiles(cls, smiles,
                    num_conformers=1,
                    energy_evaluator:EnergyEvaluator=None,
                    optimize=False,
                    add_implicit_hydrogens=True,
                    mmff_params=None
                    ):
        rdkit_mol = Chem.MolFromSmiles(smiles)
        if add_implicit_hydrogens:
            rdkit_mol = Chem.AddHs(rdkit_mol)

        if mmff_params is None:
            mmff_params = MMFFEnergyEvaluator.get_default_params()

        if energy_evaluator is None:
            num_conformers = 1

        conformer_set = AllChem.EmbedMultipleConfs(rdkit_mol, numConfs=1, params=mmff_params)
        conformers = [
            conformer_set.GetConformer(conf_id)
            for conf_id in range(num_conformers)
        ]
        if energy_evaluator is not None:
            if optimize:
                for i, conf in enumerate(conformers):
                    conformers[i] = energy_evaluator.optimize(conf)
            energies = [
                energy_evaluator.
            ]



        return mol

    @classmethod
    def from_rdkit(cls, rdkit_conformer):

        return cls(ase_mol, Chem.GetFormalCharge(rdkit_conformer))


    @property
    def atom_positions(self):
        return [
                [s, p]
                for s,p in zip(self.ase_mol.symbols, self.ase_mol.positions)
        ]

    default_note= "Generated by RDKit"
    def to_xyz(self, note=None):
        xyz = []
        atom_positions = self.atom_positions
        num_atoms = len(atom_positions)

        # Add the number of atoms and an optional comment line
        xyz.append(f"{num_atoms}")
        xyz.append(self.default_note if note is None else note)

        # Add atomic symbols and coordinates to the XYZ list
        for symbol, pos in atom_positions:
            xyz.append(f"{symbol}    {pos.x:.6f}    {pos.y:.6f}    {pos.z:.6f}")

        return "\n".join(xyz)


class ReactionComponentSet:
    ...